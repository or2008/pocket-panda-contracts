/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AnimalFactoryInterface extends ethers.utils.Interface {
  functions: {
    "getEggPhaseList()": FunctionFragment;
    "deleteMember(address)": FunctionFragment;
    "priceForMateAdvertisement()": FunctionFragment;
    "showMyAnimalBalance()": FunctionFragment;
    "MintAnimalsFromAnimalFactory(string,string)": FunctionFragment;
    "priceForSuccessfulSale()": FunctionFragment;
    "getAnimalNameDescAttribById(uint256)": FunctionFragment;
    "isMintingPaused()": FunctionFragment;
    "pauseMinting(bool)": FunctionFragment;
    "ownerPerThousandShareForMating()": FunctionFragment;
    "weiRaised()": FunctionFragment;
    "isMatingPaused()": FunctionFragment;
    "putMatingRequest(uint256,uint256)": FunctionFragment;
    "claimFreeAnimalFromAnimalFactory(string,string)": FunctionFragment;
    "withdrawSaleRequest(uint256)": FunctionFragment;
    "weiPerAnimal()": FunctionFragment;
    "totalFreeAnimalsMax()": FunctionFragment;
    "setPriceRate(uint256)": FunctionFragment;
    "setBuyingAssetsRate(uint256)": FunctionFragment;
    "TransferAnimalToAnotherUser(uint256,address)": FunctionFragment;
    "changeFreeMaxMintable(uint256)": FunctionFragment;
    "approvePendingAssets(uint256)": FunctionFragment;
    "getChildrenAgainstAnimalId(uint256)": FunctionFragment;
    "pauseMating(bool)": FunctionFragment;
    "getAllMatingAnimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceForBuyingAssets()": FunctionFragment;
    "getAllAnimalsByAddress(address)": FunctionFragment;
    "getAnimalByIdVisibility(uint256)": FunctionFragment;
    "freeAnimalsLimit()": FunctionFragment;
    "priceForSaleAdvertisement()": FunctionFragment;
    "ownerPerThousandShareForBuying()": FunctionFragment;
    "buyAssets(uint256,uint256)": FunctionFragment;
    "listMembers()": FunctionFragment;
    "getAnimalById(uint256)": FunctionFragment;
    "setMateAdvertisementRate(uint256)": FunctionFragment;
    "getAllSaleAnimals()": FunctionFragment;
    "getAnimalIdsWithPendingAssets()": FunctionFragment;
    "addMember(address)": FunctionFragment;
    "updateAnimal(uint256,string,string,string)": FunctionFragment;
    "getOwnerByAnimalId(uint256)": FunctionFragment;
    "mateAnimal(uint256,uint256,string,string)": FunctionFragment;
    "pauseContract(bool)": FunctionFragment;
    "changeMaxMintable(uint256)": FunctionFragment;
    "putSaleRequest(uint256,uint256)": FunctionFragment;
    "withdrawMatingRequest(uint256)": FunctionFragment;
    "changeFreeAnimalsLimit(uint256)": FunctionFragment;
    "buyAnimalsFromUser(uint256)": FunctionFragment;
    "setSaleAdvertisementRate(uint256)": FunctionFragment;
    "totalAnimalsCreated()": FunctionFragment;
    "removeFromEggPhase(uint256)": FunctionFragment;
    "totalAnimalsMax()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "isContractPaused()": FunctionFragment;
    "voteCuteness(uint256,uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getEggPhaseList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceForMateAdvertisement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showMyAnimalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MintAnimalsFromAnimalFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceForSuccessfulSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimalNameDescAttribById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerPerThousandShareForMating",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weiRaised", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMatingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "putMatingRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFreeAnimalFromAnimalFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSaleRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weiPerAnimal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFreeAnimalsMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingAssetsRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TransferAnimalToAnotherUser",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFreeMaxMintable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePendingAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChildrenAgainstAnimalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseMating",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMatingAnimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceForBuyingAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAnimalsByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimalByIdVisibility",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeAnimalsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceForSaleAdvertisement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerPerThousandShareForBuying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyAssets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMateAdvertisementRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSaleAnimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimalIdsWithPendingAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateAnimal",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerByAnimalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mateAnimal",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxMintable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "putSaleRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMatingRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFreeAnimalsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAnimalsFromUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleAdvertisementRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAnimalsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromEggPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAnimalsMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteCuteness",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getEggPhaseList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceForMateAdvertisement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showMyAnimalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MintAnimalsFromAnimalFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceForSuccessfulSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnimalNameDescAttribById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerPerThousandShareForMating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weiRaised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMatingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "putMatingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFreeAnimalFromAnimalFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSaleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiPerAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFreeAnimalsMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingAssetsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TransferAnimalToAnotherUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFreeMaxMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePendingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChildrenAgainstAnimalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseMating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMatingAnimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceForBuyingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAnimalsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnimalByIdVisibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeAnimalsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceForSaleAdvertisement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerPerThousandShareForBuying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnimalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMateAdvertisementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSaleAnimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnimalIdsWithPendingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerByAnimalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mateAnimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "putSaleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMatingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFreeAnimalsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAnimalsFromUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleAdvertisementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAnimalsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromEggPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAnimalsMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteCuteness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "AnimalsPurchased(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnimalsPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class AnimalFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AnimalFactoryInterface;

  functions: {
    getEggPhaseList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getEggPhaseList()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    deleteMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deleteMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceForMateAdvertisement(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceForMateAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    showMyAnimalBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenBalance: BigNumber }>;

    "showMyAnimalBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenBalance: BigNumber }>;

    MintAnimalsFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "MintAnimalsFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceForSuccessfulSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceForSuccessfulSale()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAnimalNameDescAttribById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber]>;

    "getAnimalNameDescAttribById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber]>;

    isMintingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isMintingPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pauseMinting(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseMinting(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerPerThousandShareForMating(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ownerPerThousandShareForMating()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weiRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weiRaised()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isMatingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isMatingPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    putMatingRequest(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "putMatingRequest(uint256,uint256)"(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFreeAnimalFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimFreeAnimalFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSaleRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawSaleRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weiPerAnimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weiPerAnimal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFreeAnimalsMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFreeAnimalsMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPriceRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPriceRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingAssetsRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBuyingAssetsRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TransferAnimalToAnotherUser(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "TransferAnimalToAnotherUser(uint256,address)"(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFreeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeFreeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvePendingAssets(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approvePendingAssets(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChildrenAgainstAnimalId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getChildrenAgainstAnimalId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    pauseMating(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseMating(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllMatingAnimals(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getAllMatingAnimals()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceForBuyingAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceForBuyingAssets()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllAnimalsByAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { listAnimals: BigNumber[] }>;

    "getAllAnimalsByAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { listAnimals: BigNumber[] }>;

    getAnimalByIdVisibility(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        upforsale: boolean;
        upformating: boolean;
        eggphase: boolean;
        isbornbymating: boolean;
        birthdate: BigNumber;
        assetsid: BigNumber;
        generationid: BigNumber;
      }
    >;

    "getAnimalByIdVisibility(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        upforsale: boolean;
        upformating: boolean;
        eggphase: boolean;
        isbornbymating: boolean;
        birthdate: BigNumber;
        assetsid: BigNumber;
        generationid: BigNumber;
      }
    >;

    freeAnimalsLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "freeAnimalsLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceForSaleAdvertisement(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceForSaleAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerPerThousandShareForBuying(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ownerPerThousandShareForBuying()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyAssets(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyAssets(uint256,uint256)"(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listMembers(overrides?: CallOverrides): Promise<[string[]]>;

    "listMembers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getAnimalById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    "getAnimalById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    setMateAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMateAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllSaleAnimals(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getAllSaleAnimals()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAnimalIdsWithPendingAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getAnimalIdsWithPendingAssets()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAnimal(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAnimal(uint256,string,string,string)"(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwnerByAnimalId(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwnerByAnimalId(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mateAnimal(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mateAnimal(uint256,uint256,string,string)"(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseContract(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseContract(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    putSaleRequest(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "putSaleRequest(uint256,uint256)"(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMatingRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawMatingRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFreeAnimalsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeFreeAnimalsLimit(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAnimalsFromUser(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyAnimalsFromUser(uint256)"(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSaleAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAnimalsCreated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAnimalsCreated()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromEggPhase(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFromEggPhase(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAnimalsMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAnimalsMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isContractPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isContractPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    voteCuteness(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "voteCuteness(uint256,uint256)"(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getEggPhaseList(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getEggPhaseList()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  deleteMember(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deleteMember(address)"(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceForMateAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

  "priceForMateAdvertisement()"(overrides?: CallOverrides): Promise<BigNumber>;

  showMyAnimalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "showMyAnimalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  MintAnimalsFromAnimalFactory(
    animalName: string,
    animalDesc: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "MintAnimalsFromAnimalFactory(string,string)"(
    animalName: string,
    animalDesc: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceForSuccessfulSale(overrides?: CallOverrides): Promise<BigNumber>;

  "priceForSuccessfulSale()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAnimalNameDescAttribById(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber]>;

  "getAnimalNameDescAttribById(uint256)"(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber]>;

  isMintingPaused(overrides?: CallOverrides): Promise<boolean>;

  "isMintingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  pauseMinting(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseMinting(bool)"(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerPerThousandShareForMating(overrides?: CallOverrides): Promise<BigNumber>;

  "ownerPerThousandShareForMating()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

  "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

  isMatingPaused(overrides?: CallOverrides): Promise<boolean>;

  "isMatingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  putMatingRequest(
    animalId: BigNumberish,
    matePrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "putMatingRequest(uint256,uint256)"(
    animalId: BigNumberish,
    matePrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFreeAnimalFromAnimalFactory(
    animalName: string,
    animalDesc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimFreeAnimalFromAnimalFactory(string,string)"(
    animalName: string,
    animalDesc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSaleRequest(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawSaleRequest(uint256)"(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weiPerAnimal(overrides?: CallOverrides): Promise<BigNumber>;

  "weiPerAnimal()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalFreeAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFreeAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  setPriceRate(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPriceRate(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingAssetsRate(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBuyingAssetsRate(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TransferAnimalToAnotherUser(
    animalId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "TransferAnimalToAnotherUser(uint256,address)"(
    animalId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFreeMaxMintable(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeFreeMaxMintable(uint256)"(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvePendingAssets(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approvePendingAssets(uint256)"(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChildrenAgainstAnimalId(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getChildrenAgainstAnimalId(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  pauseMating(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseMating(bool)"(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllMatingAnimals(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getAllMatingAnimals()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceForBuyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "priceForBuyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAllAnimalsByAddress(
    ad: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAllAnimalsByAddress(address)"(
    ad: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAnimalByIdVisibility(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
      upforsale: boolean;
      upformating: boolean;
      eggphase: boolean;
      isbornbymating: boolean;
      birthdate: BigNumber;
      assetsid: BigNumber;
      generationid: BigNumber;
    }
  >;

  "getAnimalByIdVisibility(uint256)"(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
      upforsale: boolean;
      upformating: boolean;
      eggphase: boolean;
      isbornbymating: boolean;
      birthdate: BigNumber;
      assetsid: BigNumber;
      generationid: BigNumber;
    }
  >;

  freeAnimalsLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "freeAnimalsLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceForSaleAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

  "priceForSaleAdvertisement()"(overrides?: CallOverrides): Promise<BigNumber>;

  ownerPerThousandShareForBuying(overrides?: CallOverrides): Promise<BigNumber>;

  "ownerPerThousandShareForBuying()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyAssets(
    cId: BigNumberish,
    aId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyAssets(uint256,uint256)"(
    cId: BigNumberish,
    aId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listMembers(overrides?: CallOverrides): Promise<string[]>;

  "listMembers()"(overrides?: CallOverrides): Promise<string[]>;

  getAnimalById(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  "getAnimalById(uint256)"(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  setMateAdvertisementRate(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMateAdvertisementRate(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllSaleAnimals(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getAllSaleAnimals()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAnimalIdsWithPendingAssets(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAnimalIdsWithPendingAssets()"(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addMember(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMember(address)"(
    member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAnimal(
    animalId: BigNumberish,
    name: string,
    desc: string,
    attributes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAnimal(uint256,string,string,string)"(
    animalId: BigNumberish,
    name: string,
    desc: string,
    attributes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwnerByAnimalId(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOwnerByAnimalId(uint256)"(
    aid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  mateAnimal(
    parent1Id: BigNumberish,
    parent2Id: BigNumberish,
    animalName: string,
    animalDesc: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mateAnimal(uint256,uint256,string,string)"(
    parent1Id: BigNumberish,
    parent2Id: BigNumberish,
    animalName: string,
    animalDesc: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseContract(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseContract(bool)"(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxMintable(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeMaxMintable(uint256)"(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  putSaleRequest(
    animalId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "putSaleRequest(uint256,uint256)"(
    animalId: BigNumberish,
    salePrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMatingRequest(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawMatingRequest(uint256)"(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFreeAnimalsLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeFreeAnimalsLimit(uint256)"(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAnimalsFromUser(
    animalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyAnimalsFromUser(uint256)"(
    animalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleAdvertisementRate(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSaleAdvertisementRate(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAnimalsCreated(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAnimalsCreated()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromEggPhase(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFromEggPhase(uint256)"(
    animalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isContractPaused(overrides?: CallOverrides): Promise<boolean>;

  "isContractPaused()"(overrides?: CallOverrides): Promise<boolean>;

  voteCuteness(
    animalId: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "voteCuteness(uint256,uint256)"(
    animalId: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getEggPhaseList(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getEggPhaseList()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    deleteMember(member: string, overrides?: CallOverrides): Promise<void>;

    "deleteMember(address)"(
      member: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceForMateAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForMateAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showMyAnimalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "showMyAnimalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    MintAnimalsFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "MintAnimalsFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceForSuccessfulSale(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForSuccessfulSale()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnimalNameDescAttribById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber]>;

    "getAnimalNameDescAttribById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber]>;

    isMintingPaused(overrides?: CallOverrides): Promise<boolean>;

    "isMintingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    pauseMinting(isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseMinting(bool)"(
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerPerThousandShareForMating(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerPerThousandShareForMating()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMatingPaused(overrides?: CallOverrides): Promise<boolean>;

    "isMatingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    putMatingRequest(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "putMatingRequest(uint256,uint256)"(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFreeAnimalFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFreeAnimalFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSaleRequest(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawSaleRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weiPerAnimal(overrides?: CallOverrides): Promise<BigNumber>;

    "weiPerAnimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFreeAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFreeAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceRate(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setPriceRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBuyingAssetsRate(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setBuyingAssetsRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    TransferAnimalToAnotherUser(
      animalId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "TransferAnimalToAnotherUser(uint256,address)"(
      animalId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFreeMaxMintable(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFreeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvePendingAssets(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approvePendingAssets(uint256)"(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getChildrenAgainstAnimalId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getChildrenAgainstAnimalId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    pauseMating(isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseMating(bool)"(
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllMatingAnimals(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getAllMatingAnimals()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceForBuyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForBuyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAnimalsByAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAllAnimalsByAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAnimalByIdVisibility(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        upforsale: boolean;
        upformating: boolean;
        eggphase: boolean;
        isbornbymating: boolean;
        birthdate: BigNumber;
        assetsid: BigNumber;
        generationid: BigNumber;
      }
    >;

    "getAnimalByIdVisibility(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        upforsale: boolean;
        upformating: boolean;
        eggphase: boolean;
        isbornbymating: boolean;
        birthdate: BigNumber;
        assetsid: BigNumber;
        generationid: BigNumber;
      }
    >;

    freeAnimalsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "freeAnimalsLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceForSaleAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForSaleAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerPerThousandShareForBuying(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerPerThousandShareForBuying()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAssets(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyAssets(uint256,uint256)"(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listMembers(overrides?: CallOverrides): Promise<string[]>;

    "listMembers()"(overrides?: CallOverrides): Promise<string[]>;

    getAnimalById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    "getAnimalById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    setMateAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setMateAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllSaleAnimals(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getAllSaleAnimals()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAnimalIdsWithPendingAssets(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAnimalIdsWithPendingAssets()"(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addMember(member: string, overrides?: CallOverrides): Promise<void>;

    "addMember(address)"(
      member: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnimal(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAnimal(uint256,string,string,string)"(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerByAnimalId(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOwnerByAnimalId(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mateAnimal(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mateAnimal(uint256,uint256,string,string)"(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseContract(isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseContract(bool)"(
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxMintable(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    putSaleRequest(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "putSaleRequest(uint256,uint256)"(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMatingRequest(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawMatingRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFreeAnimalsLimit(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFreeAnimalsLimit(uint256)"(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAnimalsFromUser(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyAnimalsFromUser(uint256)"(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setSaleAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalAnimalsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAnimalsCreated()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromEggPhase(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromEggPhase(uint256)"(
      animalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isContractPaused(overrides?: CallOverrides): Promise<boolean>;

    "isContractPaused()"(overrides?: CallOverrides): Promise<boolean>;

    voteCuteness(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "voteCuteness(uint256,uint256)"(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AnimalsPurchased(
      purchaser: string | null,
      beneficiary: string | null,
      value: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    getEggPhaseList(overrides?: CallOverrides): Promise<BigNumber>;

    "getEggPhaseList()"(overrides?: CallOverrides): Promise<BigNumber>;

    deleteMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deleteMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceForMateAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForMateAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showMyAnimalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "showMyAnimalBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    MintAnimalsFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "MintAnimalsFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceForSuccessfulSale(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForSuccessfulSale()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnimalNameDescAttribById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnimalNameDescAttribById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isMintingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauseMinting(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseMinting(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerPerThousandShareForMating(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerPerThousandShareForMating()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMatingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isMatingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    putMatingRequest(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "putMatingRequest(uint256,uint256)"(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFreeAnimalFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimFreeAnimalFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSaleRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawSaleRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weiPerAnimal(overrides?: CallOverrides): Promise<BigNumber>;

    "weiPerAnimal()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFreeAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFreeAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPriceRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingAssetsRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBuyingAssetsRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TransferAnimalToAnotherUser(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "TransferAnimalToAnotherUser(uint256,address)"(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFreeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeFreeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvePendingAssets(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approvePendingAssets(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChildrenAgainstAnimalId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChildrenAgainstAnimalId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseMating(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseMating(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllMatingAnimals(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllMatingAnimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceForBuyingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForBuyingAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAnimalsByAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllAnimalsByAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAnimalByIdVisibility(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnimalByIdVisibility(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeAnimalsLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "freeAnimalsLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceForSaleAdvertisement(overrides?: CallOverrides): Promise<BigNumber>;

    "priceForSaleAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerPerThousandShareForBuying(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerPerThousandShareForBuying()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAssets(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyAssets(uint256,uint256)"(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listMembers(overrides?: CallOverrides): Promise<BigNumber>;

    "listMembers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnimalById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnimalById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMateAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMateAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllSaleAnimals(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllSaleAnimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnimalIdsWithPendingAssets(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnimalIdsWithPendingAssets()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAnimal(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAnimal(uint256,string,string,string)"(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwnerByAnimalId(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnerByAnimalId(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mateAnimal(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mateAnimal(uint256,uint256,string,string)"(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseContract(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseContract(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    putSaleRequest(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "putSaleRequest(uint256,uint256)"(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMatingRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawMatingRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFreeAnimalsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeFreeAnimalsLimit(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAnimalsFromUser(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyAnimalsFromUser(uint256)"(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSaleAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAnimalsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAnimalsCreated()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromEggPhase(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFromEggPhase(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAnimalsMax(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAnimalsMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isContractPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isContractPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    voteCuteness(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "voteCuteness(uint256,uint256)"(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getEggPhaseList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEggPhaseList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deleteMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceForMateAdvertisement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceForMateAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showMyAnimalBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "showMyAnimalBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MintAnimalsFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "MintAnimalsFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceForSuccessfulSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceForSuccessfulSale()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnimalNameDescAttribById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnimalNameDescAttribById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMintingPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseMinting(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseMinting(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerPerThousandShareForMating(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerPerThousandShareForMating()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weiRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weiRaised()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMatingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMatingPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    putMatingRequest(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "putMatingRequest(uint256,uint256)"(
      animalId: BigNumberish,
      matePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFreeAnimalFromAnimalFactory(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimFreeAnimalFromAnimalFactory(string,string)"(
      animalName: string,
      animalDesc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSaleRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawSaleRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weiPerAnimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weiPerAnimal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFreeAnimalsMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalFreeAnimalsMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPriceRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingAssetsRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBuyingAssetsRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TransferAnimalToAnotherUser(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "TransferAnimalToAnotherUser(uint256,address)"(
      animalId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFreeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeFreeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvePendingAssets(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approvePendingAssets(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChildrenAgainstAnimalId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChildrenAgainstAnimalId(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseMating(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseMating(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllMatingAnimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllMatingAnimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceForBuyingAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceForBuyingAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAnimalsByAddress(
      ad: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllAnimalsByAddress(address)"(
      ad: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnimalByIdVisibility(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnimalByIdVisibility(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeAnimalsLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "freeAnimalsLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceForSaleAdvertisement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceForSaleAdvertisement()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerPerThousandShareForBuying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerPerThousandShareForBuying()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAssets(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyAssets(uint256,uint256)"(
      cId: BigNumberish,
      aId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "listMembers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnimalById(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnimalById(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMateAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMateAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllSaleAnimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllSaleAnimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnimalIdsWithPendingAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnimalIdsWithPendingAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addMember(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMember(address)"(
      member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAnimal(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAnimal(uint256,string,string,string)"(
      animalId: BigNumberish,
      name: string,
      desc: string,
      attributes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwnerByAnimalId(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnerByAnimalId(uint256)"(
      aid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mateAnimal(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mateAnimal(uint256,uint256,string,string)"(
      parent1Id: BigNumberish,
      parent2Id: BigNumberish,
      animalName: string,
      animalDesc: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseContract(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseContract(bool)"(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxMintable(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeMaxMintable(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    putSaleRequest(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "putSaleRequest(uint256,uint256)"(
      animalId: BigNumberish,
      salePrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMatingRequest(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawMatingRequest(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFreeAnimalsLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeFreeAnimalsLimit(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAnimalsFromUser(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyAnimalsFromUser(uint256)"(
      animalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleAdvertisementRate(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSaleAdvertisementRate(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAnimalsCreated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAnimalsCreated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromEggPhase(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFromEggPhase(uint256)"(
      animalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAnimalsMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAnimalsMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isContractPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isContractPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteCuteness(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "voteCuteness(uint256,uint256)"(
      animalId: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
