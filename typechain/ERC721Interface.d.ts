/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC721InterfaceInterface extends ethers.utils.Interface {
  functions: {
    "totalSupply()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "getTotalTokensAgainstAddress(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "setAnimalMeta(uint256,string)": FunctionFragment;
    "sendToken(address,uint256,string)": FunctionFragment;
    "getAnimalIdAgainstAddress(address)": FunctionFragment;
    "burnToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokensAgainstAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAnimalMeta",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimalIdAgainstAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokensAgainstAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnimalMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAnimalIdAgainstAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnToken", data: BytesLike): Result;

  events: {};
}

export class ERC721Interface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721InterfaceInterface;

  functions: {
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    getTotalTokensAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAnimals: BigNumber }>;

    "getTotalTokensAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAnimals: BigNumber }>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    setAnimalMeta(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAnimalMeta(uint256,string)"(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToken(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendToken(address,uint256,string)"(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAnimalIdAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { listAnimals: BigNumber[] }>;

    "getAnimalIdAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { listAnimals: BigNumber[] }>;

    burnToken(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnToken(address,uint256)"(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  safeTransferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalTokensAgainstAddress(
    ownerAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalTokensAgainstAddress(address)"(
    ownerAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAnimalMeta(
    tid: BigNumberish,
    tmeta: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAnimalMeta(uint256,string)"(
    tid: BigNumberish,
    tmeta: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToken(
    sendTo: string,
    tid: BigNumberish,
    tmeta: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendToken(address,uint256,string)"(
    sendTo: string,
    tid: BigNumberish,
    tmeta: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAnimalIdAgainstAddress(
    ownerAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAnimalIdAgainstAddress(address)"(
    ownerAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burnToken(
    tokenOwner: string,
    tid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnToken(address,uint256)"(
    tokenOwner: string,
    tid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalTokensAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTokensAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAnimalMeta(
      tid: BigNumberish,
      tmeta: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnimalMeta(uint256,string)"(
      tid: BigNumberish,
      tmeta: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToken(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendToken(address,uint256,string)"(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnimalIdAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAnimalIdAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burnToken(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnToken(address,uint256)"(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokensAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTokensAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAnimalMeta(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAnimalMeta(uint256,string)"(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToken(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendToken(address,uint256,string)"(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAnimalIdAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnimalIdAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnToken(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnToken(address,uint256)"(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokensAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalTokensAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAnimalMeta(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAnimalMeta(uint256,string)"(
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToken(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendToken(address,uint256,string)"(
      sendTo: string,
      tid: BigNumberish,
      tmeta: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAnimalIdAgainstAddress(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnimalIdAgainstAddress(address)"(
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnToken(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnToken(address,uint256)"(
      tokenOwner: string,
      tid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
